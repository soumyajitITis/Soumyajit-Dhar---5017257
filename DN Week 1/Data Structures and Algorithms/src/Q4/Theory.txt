#Array Representation in Memory:
 -Arrays are contiguous blocks of memory where each element is of the same data type.
  They allow direct access to any element using its index, which makes retrieval very fast (O(1) time complexity).

  >Advantages:
  -Fast access to elements using index.
  -Efficient memory allocation for fixed-size collections.
  -Simple and straightforward to use.

#Time Complexity:
 -Add: O(1) (if there is space in the array).
 -Search: O(n) (since it requires scanning through the array).
 -Traverse: O(n) (visits each element once).
 -Delete: O(n) (requires scanning to find the element and shifting subsequent elements).

 >Limitations of Arrays:
  -Fixed Size: The size of the array must be defined at the time of creation and cannot be changed.
  -Memory Waste: If the array is not fully used, it can waste memory.
  -Insertion/Deletion: Inserting or deleting elements can be inefficient as it may require shifting elements.

 >When to Use Arrays:
  -When the number of elements is known and fixed.
  -When quick access to elements using an index is required.
  -For simple collections where the overhead of dynamic structures like lists is unnecessary.