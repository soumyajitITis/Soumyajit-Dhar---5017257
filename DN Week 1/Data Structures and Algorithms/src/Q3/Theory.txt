Sorting Algorithms:
Bubble Sort:
Bubble Sort is a simple comparison-based sorting algorithm. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process is repeated until the list is sorted.
Time Complexity: O(n^2)
Space Complexity: O(1)

Insertion Sort:
Insertion Sort builds the sorted array one element at a time. It picks the next element and inserts it into its correct position in the already sorted part of the array.
Time Complexity: O(n^2)
Space Complexity: O(1)

Quick Sort:
Quick Sort is a divide-and-conquer algorithm. It selects a 'pivot' element and partitions the array into two sub-arrays: elements less than the pivot and elements greater than the pivot. It then recursively sorts the sub-arrays.
Time Complexity: O(n log n) on average, O(n^2) in the worst case
Space Complexity: O(log n)

Merge Sort:
Merge Sort is also a divide-and-conquer algorithm. It divides the array into two halves, recursively sorts them, and then merges the two sorted halves.
Time Complexity: O(n log n)
Space Complexity: O(n)

Time Complexity Comparison:
Bubble Sort: O(n^2)
Bubble Sort compares and swaps adjacent elements, leading to quadratic time complexity.
Quick Sort: O(n log n) on average, O(n^2) in the worst case
Quick Sort's average-case time complexity is much better due to its divide-and-conquer approach.

#Why Quick Sort is Preferred Over Bubble Sort
 Efficiency: Quick Sort generally performs better on large datasets because of its average-case time complexity of O(n log n).
 Scalability: Quick Sort's divide-and-conquer mechanism makes it more scalable compared to the pairwise comparison in Bubble Sort.
 Memory Usage: Quick Sort uses less additional memory compared to Merge Sort, and its in-place partitioning makes it space-efficient.