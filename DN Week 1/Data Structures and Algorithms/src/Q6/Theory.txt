#Search Algorithms:
 -Linear Search:
 Algorithm: Traverse the list from the beginning to the end, comparing each element with the target value.
 Time Complexity:
 Best Case: O(1) - The target is the first element.
 Average Case: O(n) - The target is somewhere in the middle.
 Worst Case: O(n) - The target is the last element or not present.

 -Binary Search:
 Algorithm: Divide the sorted list into two halves, compare the target value with the middle element, and recursively search in the left or right half.
 Time Complexity:
 Best Case: O(1) - The target is the middle element.
 Average Case: O(log n) - The target is somewhere in the list.
 Worst Case: O(log n) - The target is not present.

#Time Complexity Comparison:

 Linear Search:
 -Best Case: O(1)
 -Average Case: O(n)
 -Worst Case: O(n)

 Binary Search:
 -Best Case: O(1)
 -Average Case: O(log n)
 -Worst Case: O(log n)

 When to Use Each Algorithm
  Linear Search:
   Suitable for small or unsorted datasets.
   Simple to implement and does not require the list to be sorted.
   Useful when the number of search operations is low compared to the size of the dataset.

 Binary Search:
   Suitable for large or sorted datasets.
   More efficient than linear search for large datasets.
   Requires the list to be sorted, which might add overhead if frequent insertions and deletions are needed.